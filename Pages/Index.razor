@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />
<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile accept=".pdf" OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

<button disabled="@isDisabled" class="btn btn-primary" @onclick="GeneratePDF">Generate PDF</button>

@code {
    @using Syncfusion.Pdf;
    @using Syncfusion.Pdf.Graphics;
    @using System.IO;
@using Syncfusion.Pdf.Parsing;
    @inject Microsoft.JSInterop.IJSRuntime JS

    private Boolean isDisabled =true;
    
    

    private async void GeneratePDF()
    {
        PdfDocument document = new PdfDocument();
        foreach(var file in loadedFiles)
        {
            try
            {
                FileStream fs = new(file.Name, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);
                    PdfLoadedDocument ldoc = new PdfLoadedDocument(fs);
                    document.Append(ldoc);
                  
            }
            catch(Exception ex)
            {
                
            }

        }

        try{
        //Saving the PDF to the MemoryStream
        MemoryStream stream = new MemoryStream();

        document.Save(stream);
        document.Close(true);
        
        
        JS.SaveAs("Sample.pdf", stream.ToArray());
        }
        catch (Exception ex)
        {

        }

    }

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                
            }
        }
        isDisabled = false;
        isLoading = false;
    }
}
